swagger: "2.0"
info:
  description: "API for managing players, records, file uploads, and ratings"
  version: "1.0.0"
  title: "Player and Records API"
host: "localhost:5000"
basePath: "/"
schemes:
  - "http"
paths:
  /login:
    post:
      summary: "Login user"
      description: "Allows users to log in using username and password."
      consumes:
        - application/json
      parameters:
        - in: header
          name: username
          type: string
          required: true
          description: "User's username"
        - in: header
          name: password
          type: string
          required: true
          description: "User's password"
      responses:
        200:
          description: "Login successful"
        400:
          description: "Username and password required"
        401:
          description: "Invalid credentials"

  /user-details/{username}:
    get:
      summary: "Get user details"
      description: "Fetches details for a specific user."
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: "The username of the user"
      responses:
        200:
          description: "User details fetched successfully"
        404:
          description: "User not found"

  /upload-file:
    post:
      summary: "Upload a document"
      description: "Uploads a file for a user and creates a record."
      consumes:
        - multipart/form-data
      parameters:
        - in: header
          name: documentType
          type: string
          required: true
          description: "Type of the document"
        - in: header
          name: username
          type: string
          required: true
          description: "User's username"
        - in: formData
          name: file
          type: file
          required: true
          description: "File to upload"
      responses:
        201:
          description: "File uploaded successfully"
        400:
          description: "Bad request, file or headers are missing"
        404:
          description: "User not found"

  /records:
    get:
      summary: "Get all records"
      description: "Fetches all records, optionally filtered by username."
      parameters:
        - in: header
          name: username
          type: string
          required: false
          description: "Username to filter records"
      responses:
        200:
          description: "List of records fetched successfully"
        404:
          description: "User not found"

  /records/{document_name}:
    get:
      summary: "Download a document"
      description: "Fetches the document for the specified document name and user."
      parameters:
        - in: path
          name: document_name
          type: string
          required: true
          description: "Name of the document"
        - in: header
          name: username
          type: string
          required: true
          description: "Username associated with the document"
      responses:
        200:
          description: "Document fetched successfully"
        400:
          description: "Username header is required"
        404:
          description: "Document or user not found"
    
    delete:
      summary: "Delete a record"
      description: "Deletes the record for the specified document name and user."
      parameters:
        - in: path
          name: document_name
          type: string
          required: true
          description: "Name of the document"
        - in: header
          name: username
          type: string
          required: true
          description: "Username associated with the document"
      responses:
        200:
          description: "Record deleted successfully"
        400:
          description: "Username header is required"
        404:
          description: "Record not found"

  /record/rate:
    post:
      summary: "Rate a record"
      description: "Allows users to rate a document by providing a mark."
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: "Rating details"
          required: true
          schema:
            type: object
            properties:
              documentName:
                type: string
              user:
                type: string
              mark:
                type: integer
      responses:
          200:
            description: "Record rated successfully"
          400:
            description: "documentName, user, and mark are required"
          404:
            description: "Record or user not found"
